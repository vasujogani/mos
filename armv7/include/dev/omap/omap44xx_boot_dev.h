#ifndef __omap44xx_boot_DEV_H
#define __omap44xx_boot_DEV_H 1
/*
 * DEVICE DEFINITION: OMAP44xx Peripheral Boot Messages
 * 
 * Copyright (c) 2010, ETH Zurich.
 * All rights reserved.
 * 
 * This file is distributed under the terms in the attached LICENSE
 * file. If you do not find this file, copies can be found by
 * writing to:
 * ETH Zurich D-INFK, Universitaetstr. 6, CH-8092 Zurich.
 * Attn: Systems Group.
 * 
 * THIS FILE IS AUTOMATICALLY GENERATED BY MACKEREL: DO NOT EDIT!
 */
#include <mackerel/mackerel.h>
#include <inttypes.h>
#undef __DN
#define __DN(x) omap44xx_boot ## _ ## x
/*
 * Constants defn: omap44xx_boot.boot_msg (Booting Messages)
 *  - no width specified
 */
typedef uint32_t omap44xx_boot_boot_msg_t;
#define omap44xx_boot_periph_boot ((omap44xx_boot_boot_msg_t)0xf0030002)
#define omap44xx_boot_get_asic_id ((omap44xx_boot_boot_msg_t)0xf0030003)
#define omap44xx_boot_chdev_void ((omap44xx_boot_boot_msg_t)0xf0030006)
#define omap44xx_boot_chdev_xip ((omap44xx_boot_boot_msg_t)0xf0030106)
#define omap44xx_boot_chdev_xipwait ((omap44xx_boot_boot_msg_t)0xf0030206)
#define omap44xx_boot_chdev_nand ((omap44xx_boot_boot_msg_t)0xf0030306)
#define omap44xx_boot_chdev_onenand ((omap44xx_boot_boot_msg_t)0xf0030406)
#define omap44xx_boot_chdev_mmc1 ((omap44xx_boot_boot_msg_t)0xf0030506)
#define omap44xx_boot_chdev_mmc2_1 ((omap44xx_boot_boot_msg_t)0xf0030606)
#define omap44xx_boot_chdev_mmc2_2 ((omap44xx_boot_boot_msg_t)0xf0030706)
#define omap44xx_boot_chdev_uart3 ((omap44xx_boot_boot_msg_t)0xf0034306)
#define omap44xx_boot_chdev_usb1 ((omap44xx_boot_boot_msg_t)0xf0034506)
#define omap44xx_boot_chdev_ulpi ((omap44xx_boot_boot_msg_t)0xf0034606)
#define omap44xx_boot_chdev_usb2 ((omap44xx_boot_boot_msg_t)0xf0034706)

static inline char *omap44xx_boot_boot_msg_describe(omap44xx_boot_boot_msg_t _e) __attribute__ ((always_inline));
static inline char *omap44xx_boot_boot_msg_describe(omap44xx_boot_boot_msg_t _e)
{
    switch (_e) {
    case omap44xx_boot_periph_boot:
        return("periph_boot: Continue peripherial booting");
    case omap44xx_boot_get_asic_id:
        return("get_asic_id: Request ASIC ID");
    case omap44xx_boot_chdev_void:
        return("chdev_void: Void, no device");
    case omap44xx_boot_chdev_xip:
        return("chdev_xip: Switch to XIP memory");
    case omap44xx_boot_chdev_xipwait:
        return("chdev_xipwait: Switch to XIP memory, monitor wait signal");
    case omap44xx_boot_chdev_nand:
        return("chdev_nand: Switch to NAND");
    case omap44xx_boot_chdev_onenand:
        return("chdev_onenand: Switch to OneNAND");
    case omap44xx_boot_chdev_mmc1:
        return("chdev_mmc1: Switch to MMC1");
    case omap44xx_boot_chdev_mmc2_1:
        return("chdev_mmc2_1: Switch to MMC2(1)");
    case omap44xx_boot_chdev_mmc2_2:
        return("chdev_mmc2_2: Switch to MMC2(2)");
    case omap44xx_boot_chdev_uart3:
        return("chdev_uart3: Switch to UART3");
    case omap44xx_boot_chdev_usb1:
        return("chdev_usb1: Switch to USB(1) (internal transceiver)");
    case omap44xx_boot_chdev_ulpi:
        return("chdev_ulpi: Switch to USB-ULPI");
    case omap44xx_boot_chdev_usb2:
        return("chdev_usb2: Switch to USB(2) (internal transceiver)");
    default:
        return(NULL);
    }
}

static inline int omap44xx_boot_boot_msg_prtval(char *_s, size_t _size, omap44xx_boot_boot_msg_t _e) __attribute__ ((always_inline));
static inline int omap44xx_boot_boot_msg_prtval(char *_s, size_t _size, omap44xx_boot_boot_msg_t _e)
{
    char *d = omap44xx_boot_boot_msg_describe(_e);
    if (d) {
        return(snprintf(_s, _size, "%s", d));
    } else {
        return(snprintf(_s, _size, "Unknown constant %s value 0x%" PRIx64, "omap44xx_boot_boot_msg_t", (uint64_t )(_e)));
    }
}

/*
 * Device representation structure
 */
struct __DN(t) {
};
typedef struct __DN(t) __DN(t);

// No registers in this device

/*
 * Device Initialization function
 */
static inline void omap44xx_boot_initialize(__DN(t) *_dev) __attribute__ ((always_inline));
static inline void omap44xx_boot_initialize(__DN(t) *_dev)
{
}

static inline int omap44xx_boot_pr(char *_s, size_t _size, __DN(t) *_dev) __attribute__ ((always_inline));
static inline int omap44xx_boot_pr(char *_s, size_t _size, __DN(t) *_dev)
{
    int _r = 0;
    int _avail;
    int _rc;
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "Dump of device omap44xx_boot (OMAP44xx Peripheral Boot Messages):\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "End of dump of device omap44xx_boot\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    _avail = ((_r > _size) ? 0 : (_size - _r));
    _rc = snprintf(_s + _r, _avail, "-------------------------\n");
    if ((_rc > 0) && (_rc < _avail)) {
        _r = (_r + _rc);
    }
    return(_r);
}

#undef __DN
#endif // __omap44xx_boot_DEV_H
